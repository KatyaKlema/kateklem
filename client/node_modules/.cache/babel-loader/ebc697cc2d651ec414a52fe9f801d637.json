{"ast":null,"code":"// import { extend } from \"../../utils.js\";\n//\n// const initialState = {\n// \tisLoading: true,\n// \ttasks: [],\n// \tunits: [],\n// \tfunctions: [],\n// \troleUnit: [],\n// \troles: [],\n// \treviews: [],\n//     okrs: []\n// };\n//\n// const actionType = {\n// \tCHANGE_LOADING: `CHANGE_LOADING`,\n// \tLOAD_TASKS: `LOAD_TASKS`,\n// \tLOAD_UNITS: `LOAD_UNITS`,\n// \tLOAD_FUNCTIONS: `LOAD_FUNCTIONS`,\n// \tLOAD_ROLE_UNIT: `LOAD_ROLE_UNIT`,\n// \tLOAD_ROLES: \"LOAD_ROLES\",\n// \tLOAD_REVIEWS: \"LOAD_REVIEWS\",\n//     LOAD_OKRS: \"LOAD_OKRS\"\n// };\n//\n// const actionCreator = {\n// \tloadTasks: (tasks) => {\n// \t\treturn {\n// \t\t\ttype: actionType.LOAD_TASKS,\n// \t\t\tpayload: tasks,\n// \t\t};\n// \t},\n// \tloadOkrs: (okrs) => {\n// \t\treturn {\n// \t\t\ttype: actionType.LOAD_OKRS,\n// \t\t\tpayload: okrs,\n// \t\t};\n// \t},\n//\n// \tloadReviews: (reviews) => {\n// \t\treturn {\n// \t\t\ttype: actionType.LOAD_REVIEWS,\n// \t\t\tpayload: reviews,\n// \t\t};\n// \t},\n//\n// \tloadRoles: (roles) => {\n// \t\treturn {\n// \t\t\ttype: actionType.LOAD_ROLES,\n// \t\t\tpayload: roles,\n// \t\t};\n// \t},\n//\n// \tloadUnits: (units) => {\n// \t\treturn {\n// \t\t\ttype: actionType.LOAD_UNITS,\n// \t\t\tpayload: units,\n// \t\t};\n// \t},\n//\n// \tloadFunctions: (functions) => {\n// \t\treturn {\n// \t\t\ttype: actionType.LOAD_FUNCTIONS,\n// \t\t\tpayload: functions,\n// \t\t};\n// \t},\n//\n// \tloadRoleUnit: (roleUnit) => {\n// \t\treturn {\n// \t\t\ttype: actionType.LOAD_ROLE_UNIT,\n// \t\t\tpayload: roleUnit,\n// \t\t};\n// \t},\n//\n// \tchangeLoading: (isLoading) => {\n// \t\treturn {\n// \t\t\ttype: actionType.CHANGE_LOADING,\n// \t\t\tpayload: isLoading,\n// \t\t};\n// \t},\n// };\n//\n// const Operation = {\n// \tloadTasks: () => (dispatch, getState, api) => {\n// \t\treturn api.get(`/airtables/tasks`).then((response) => {\n// \t\t\tdispatch(actionCreator.loadTasks(response.data));\n// \t\t});\n// \t},\n// \tloadReviews: () => (dispatch, getState, api) => {\n// \t\treturn api.get(`/airtables/reviews`).then((response) => {\n// \t\t\tdispatch(actionCreator.loadReviews(response.data));\n// \t\t});\n// \t},\n//\n// \tloadOkrs: () => (dispatch, getState, api) => {\n// \t\treturn api.get(`/airtables/okrs`).then((response) => {\n// \t\t\tdispatch(actionCreator.loadOkrs(response.data));\n// \t\t});\n// \t},\n//\n// \tloadRoles: () => (dispatch, getState, api) => {\n// \t\treturn api.get(`/airtables/roles`).then((response) => {\n// \t\t\tdispatch(actionCreator.loadRoles(response.data));\n// \t\t});\n// \t},\n// \tloadUnits: () => (dispatch, getState, api) => {\n// \t\treturn api.get(`/airtables/units`).then((response) => {\n// \t\t\tdispatch(actionCreator.loadUnits(response.data));\n// \t\t});\n// \t},\n// \tloadFunctions: () => (dispatch, getState, api) => {\n// \t\treturn api.get(`/airtables/functions`).then((response) => {\n// \t\t\tdispatch(actionCreator.loadFunctions(response.data));\n// \t\t});\n// \t},\n// \tloadRoleUnit: () => (dispatch, getState, api) => {\n// \t\treturn api.get(`/airtables/roleunit`).then((response) => {\n// \t\t\tdispatch(actionCreator.loadRoleUnit(response.data));\n// \t\t});\n// \t},\n//\n// \taddRow: (table) => (dispatch, getState, api) => {\n// \t\treturn api.post(`/airtables/addrow/${table}`).then((response) => {\n// \t\t\treturn response;\n// \t\t});\n// \t},\n//\n// \tdeleteRow: (table, id) => (dispatch, getState, api) => {\n// \t\treturn api\n// \t\t\t.post(`/airtables/deleterow/${table}/${id}`)\n// \t\t\t.then((response) => {\n// \t\t\t\treturn response;\n// \t\t\t});\n// \t},\n//\n// \tupdateRows: (table, data) => (dispatch, getState, api) => {\n// \t\treturn api.put(`/airtables/updateRows/${table}`, {\n// \t\t\tdata: data,\n// \t\t});\n// \t},\n// };\n//\n// const reducer = (state = initialState, action) => {\n// \tswitch (action.type) {\n// \t\tcase actionType.LOAD_REVIEWS:\n// \t\t\treturn extend(state, { reviews: action.payload });\n// \t\tcase actionType.LOAD_OKRS:\n// \t\t\treturn extend(state, { okrs: action.payload });\n// \t\tcase actionType.LOAD_TASKS:\n// \t\t\treturn extend(state, { tasks: action.payload });\n// \t\tcase actionType.LOAD_UNITS:\n// \t\t\treturn extend(state, { units: action.payload });\n// \t\tcase actionType.LOAD_FUNCTIONS:\n// \t\t\treturn extend(state, { functions: action.payload });\n// \t\tcase actionType.LOAD_ROLE_UNIT:\n// \t\t\treturn extend(state, { roleUnit: action.payload });\n// \t\tcase actionType.CHANGE_LOADING:\n// \t\t\treturn extend(state, { isLoading: action.payload });\n// \t\tcase actionType.LOAD_ROLES:\n// \t\t\treturn extend(state, { roles: action.payload });\n// \t\tdefault:\n// \t\t\treturn state;\n// \t}\n// };\n//\n// export { reducer, Operation, actionType, actionCreator };","map":{"version":3,"sources":["/Users/ekaterina/Desktop/latoken/03.08.2020/operations-platform/client/src/reducer/data/data.js"],"names":[],"mappingssourcesContent":["// import { extend } from \"../../utils.js\";\n//\n// const initialState = {\n// \tisLoading: true,\n// \ttasks: [],\n// \tunits: [],\n// \tfunctions: [],\n// \troleUnit: [],\n// \troles: [],\n// \treviews: [],\n//     okrs: []\n// };\n//\n// const actionType = {\n// \tCHANGE_LOADING: `CHANGE_LOADING`,\n// \tLOAD_TASKS: `LOAD_TASKS`,\n// \tLOAD_UNITS: `LOAD_UNITS`,\n// \tLOAD_FUNCTIONS: `LOAD_FUNCTIONS`,\n// \tLOAD_ROLE_UNIT: `LOAD_ROLE_UNIT`,\n// \tLOAD_ROLES: \"LOAD_ROLES\",\n// \tLOAD_REVIEWS: \"LOAD_REVIEWS\",\n//     LOAD_OKRS: \"LOAD_OKRS\"\n// };\n//\n// const actionCreator = {\n// \tloadTasks: (tasks) => {\n// \t\treturn {\n// \t\t\ttype: actionType.LOAD_TASKS,\n// \t\t\tpayload: tasks,\n// \t\t};\n// \t},\n// \tloadOkrs: (okrs) => {\n// \t\treturn {\n// \t\t\ttype: actionType.LOAD_OKRS,\n// \t\t\tpayload: okrs,\n// \t\t};\n// \t},\n//\n// \tloadReviews: (reviews) => {\n// \t\treturn {\n// \t\t\ttype: actionType.LOAD_REVIEWS,\n// \t\t\tpayload: reviews,\n// \t\t};\n// \t},\n//\n// \tloadRoles: (roles) => {\n// \t\treturn {\n// \t\t\ttype: actionType.LOAD_ROLES,\n// \t\t\tpayload: roles,\n// \t\t};\n// \t},\n//\n// \tloadUnits: (units) => {\n// \t\treturn {\n// \t\t\ttype: actionType.LOAD_UNITS,\n// \t\t\tpayload: units,\n// \t\t};\n// \t},\n//\n// \tloadFunctions: (functions) => {\n// \t\treturn {\n// \t\t\ttype: actionType.LOAD_FUNCTIONS,\n// \t\t\tpayload: functions,\n// \t\t};\n// \t},\n//\n// \tloadRoleUnit: (roleUnit) => {\n// \t\treturn {\n// \t\t\ttype: actionType.LOAD_ROLE_UNIT,\n// \t\t\tpayload: roleUnit,\n// \t\t};\n// \t},\n//\n// \tchangeLoading: (isLoading) => {\n// \t\treturn {\n// \t\t\ttype: actionType.CHANGE_LOADING,\n// \t\t\tpayload: isLoading,\n// \t\t};\n// \t},\n// };\n//\n// const Operation = {\n// \tloadTasks: () => (dispatch, getState, api) => {\n// \t\treturn api.get(`/airtables/tasks`).then((response) => {\n// \t\t\tdispatch(actionCreator.loadTasks(response.data));\n// \t\t});\n// \t},\n// \tloadReviews: () => (dispatch, getState, api) => {\n// \t\treturn api.get(`/airtables/reviews`).then((response) => {\n// \t\t\tdispatch(actionCreator.loadReviews(response.data));\n// \t\t});\n// \t},\n//\n// \tloadOkrs: () => (dispatch, getState, api) => {\n// \t\treturn api.get(`/airtables/okrs`).then((response) => {\n// \t\t\tdispatch(actionCreator.loadOkrs(response.data));\n// \t\t});\n// \t},\n//\n// \tloadRoles: () => (dispatch, getState, api) => {\n// \t\treturn api.get(`/airtables/roles`).then((response) => {\n// \t\t\tdispatch(actionCreator.loadRoles(response.data));\n// \t\t});\n// \t},\n// \tloadUnits: () => (dispatch, getState, api) => {\n// \t\treturn api.get(`/airtables/units`).then((response) => {\n// \t\t\tdispatch(actionCreator.loadUnits(response.data));\n// \t\t});\n// \t},\n// \tloadFunctions: () => (dispatch, getState, api) => {\n// \t\treturn api.get(`/airtables/functions`).then((response) => {\n// \t\t\tdispatch(actionCreator.loadFunctions(response.data));\n// \t\t});\n// \t},\n// \tloadRoleUnit: () => (dispatch, getState, api) => {\n// \t\treturn api.get(`/airtables/roleunit`).then((response) => {\n// \t\t\tdispatch(actionCreator.loadRoleUnit(response.data));\n// \t\t});\n// \t},\n//\n// \taddRow: (table) => (dispatch, getState, api) => {\n// \t\treturn api.post(`/airtables/addrow/${table}`).then((response) => {\n// \t\t\treturn response;\n// \t\t});\n// \t},\n//\n// \tdeleteRow: (table, id) => (dispatch, getState, api) => {\n// \t\treturn api\n// \t\t\t.post(`/airtables/deleterow/${table}/${id}`)\n// \t\t\t.then((response) => {\n// \t\t\t\treturn response;\n// \t\t\t});\n// \t},\n//\n// \tupdateRows: (table, data) => (dispatch, getState, api) => {\n// \t\treturn api.put(`/airtables/updateRows/${table}`, {\n// \t\t\tdata: data,\n// \t\t});\n// \t},\n// };\n//\n// const reducer = (state = initialState, action) => {\n// \tswitch (action.type) {\n// \t\tcase actionType.LOAD_REVIEWS:\n// \t\t\treturn extend(state, { reviews: action.payload });\n// \t\tcase actionType.LOAD_OKRS:\n// \t\t\treturn extend(state, { okrs: action.payload });\n// \t\tcase actionType.LOAD_TASKS:\n// \t\t\treturn extend(state, { tasks: action.payload });\n// \t\tcase actionType.LOAD_UNITS:\n// \t\t\treturn extend(state, { units: action.payload });\n// \t\tcase actionType.LOAD_FUNCTIONS:\n// \t\t\treturn extend(state, { functions: action.payload });\n// \t\tcase actionType.LOAD_ROLE_UNIT:\n// \t\t\treturn extend(state, { roleUnit: action.payload });\n// \t\tcase actionType.CHANGE_LOADING:\n// \t\t\treturn extend(state, { isLoading: action.payload });\n// \t\tcase actionType.LOAD_ROLES:\n// \t\t\treturn extend(state, { roles: action.payload });\n// \t\tdefault:\n// \t\t\treturn state;\n// \t}\n// };\n//\n// export { reducer, Operation, actionType, actionCreator };\n"]},"metadata":{},"sourceType":"module"}