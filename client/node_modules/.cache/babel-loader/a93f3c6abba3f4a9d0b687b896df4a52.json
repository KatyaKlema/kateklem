{"ast":null,"code":"var _jsxFileName = \"/Users/ekaterina/Desktop/latoken/03.08.2020/operations-platform/client/src/components/reviews/reviews.js\";\nimport React from 'react';\nimport Table from \"../table/table\";\nimport Loading from \"../loading/loading\";\nimport { emptyRow, adaptTable, getTableStructure, adaptDataToRaw } from \"../../tables/reviews\";\nimport { getParams, checkIfEditableTable, filterUnitData } from \"../../utils\";\n\nclass Reviews extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.rowMovedHandler = row => {\n      this.dataToUpdate.push(row.getData());\n    };\n\n    this.selectedRow = {\n      airtableId: null,\n      tabulatorRow: null\n    };\n    this.dataToUpdate = [];\n    this.changeDataToUpdate = this.changeDataToUpdate.bind(this);\n    this.getDataToUpdate = this.getDataToUpdate.bind(this);\n    this.cleanDataToUpdate = this.cleanDataToUpdate.bind(this);\n    this.rowMovedHandler = this.rowMovedHandler.bind(this);\n  }\n\n  getDataToUpdate() {\n    return adaptDataToRaw(this.dataToUpdate, this.props.functions);\n  }\n\n  cleanDataToUpdate() {\n    this.dataToUpdate = [];\n  }\n\n  changeDataToUpdate(cell) {\n    const editedData = cell.getData();\n    const indexIfAlreadyExist = this.dataToUpdate.findIndex(value => value.id === editedData.id);\n\n    if (indexIfAlreadyExist > -1) {\n      this.dataToUpdate.splice(indexIfAlreadyExist, 1);\n    }\n\n    this.dataToUpdate.push(editedData);\n  }\n\n  isMovable() {\n    return this.props.user.rights === 'Regular' ? false : true;\n  }\n\n  render() {\n    const tableData = filterUnitData(this.props.reviews.map(review => adaptTable(review, this.props.units, this.props.functions, this.props.roleUnit)), this.props.user);\n    const tableStructure = checkIfEditableTable(getTableStructure(), this.props.user);\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, this.props.isLoading ? /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 19\n      }\n    }) : /*#__PURE__*/React.createElement(\"main\", {\n      className: \"page-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"page-main__wrapper wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      user: this.props.user,\n      tableData: tableData,\n      functionTableData: -1,\n      tableStructure: tableStructure,\n      functionTableStructure: -1,\n      emptyRow: emptyRow,\n      functions: this.props.functions,\n      roleUnit: this.props.roleUnit,\n      units: this.props.units,\n      roles: this.props.roles,\n      cellEditHandlers: [this.changeDataToUpdate],\n      selectedRow: this.selectedRow,\n      movable: this.isMovable(),\n      groupBy: \"unit\",\n      groupValues: [getParams(this.props.units, 'Unit')],\n      rowMovedHandler: this.rowMovedHandler,\n      tableName: \"Reviews\",\n      addRow: this.props.addRow,\n      deleteRow: this.props.deleteRow,\n      updateRows: this.props.updateRows,\n      getDataToUpdate: this.getDataToUpdate,\n      cleanDataToUpdate: this.cleanDataToUpdate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default Reviews;","map":{"version":3,"sources":["/Users/ekaterina/Desktop/latoken/03.08.2020/operations-platform/client/src/components/reviews/reviews.js"],"names":["React","Table","Loading","emptyRow","adaptTable","getTableStructure","adaptDataToRaw","getParams","checkIfEditableTable","filterUnitData","Reviews","Component","constructor","props","rowMovedHandler","row","dataToUpdate","push","getData","selectedRow","airtableId","tabulatorRow","changeDataToUpdate","bind","getDataToUpdate","cleanDataToUpdate","functions","cell","editedData","indexIfAlreadyExist","findIndex","value","id","splice","isMovable","user","rights","render","tableData","reviews","map","review","units","roleUnit","tableStructure","isLoading","roles","addRow","deleteRow","updateRows"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Table from \"../table/table\";\nimport Loading from \"../loading/loading\";\nimport {emptyRow, adaptTable, getTableStructure, adaptDataToRaw} from \"../../tables/reviews\";\nimport {getParams, checkIfEditableTable, filterUnitData} from  \"../../utils\";\n\nclass Reviews extends React.Component {\n  constructor(props){\n      super(props);\n      this.selectedRow = {\n        airtableId: null,\n        tabulatorRow: null\n      }\n\n      this.dataToUpdate = [];\n\n      this.changeDataToUpdate = this.changeDataToUpdate.bind(this);\n      this.getDataToUpdate = this.getDataToUpdate.bind(this);\n      this.cleanDataToUpdate = this.cleanDataToUpdate.bind(this);\n\n      this.rowMovedHandler = this.rowMovedHandler.bind(this);\n  }\n\n  getDataToUpdate() {\n    return adaptDataToRaw(this.dataToUpdate, this.props.functions);\n  }\n\n  cleanDataToUpdate() {\n    this.dataToUpdate = [];\n  }\n\n  changeDataToUpdate(cell) {\n    const editedData = cell.getData();\n    const indexIfAlreadyExist = this.dataToUpdate.findIndex((value) => value.id === editedData.id);\n    if (indexIfAlreadyExist > -1) {\n      this.dataToUpdate.splice(indexIfAlreadyExist, 1);\n    }\n    this.dataToUpdate.push(editedData);\n  }\n  rowMovedHandler = (row) => {\n    this.dataToUpdate.push(row.getData());\n  };\n\n  isMovable() {\n    return this.props.user.rights === 'Regular' ? false : true;\n  }\n\n  render() {\n    const tableData = filterUnitData(this.props.reviews.map((review) => adaptTable(review, this.props.units, this.props.functions, this.props.roleUnit)), this.props.user);\n    const tableStructure = checkIfEditableTable(getTableStructure(), this.props.user);\n    return (\n        <React.Fragment>\n            {this.props.isLoading \n                ? <Loading/>\n                : <main className=\"page-main\">\n                    <div className=\"page-main__wrapper wrapper\">\n                        <Table\n                            user={this.props.user}\n                            tableData={tableData}\n                            functionTableData={-1}\n                            tableStructure={tableStructure}\n                            functionTableStructure={-1}\n                            emptyRow={emptyRow}\n                            functions={this.props.functions}\n                            roleUnit={this.props.roleUnit}\n                            units={this.props.units}\n                            roles={this.props.roles}\n                            cellEditHandlers={[this.changeDataToUpdate]}\n                            selectedRow={this.selectedRow}\n                            movable={this.isMovable()}\n                            groupBy='unit'\n                            groupValues={[getParams(this.props.units, 'Unit')]}\n                            rowMovedHandler={this.rowMovedHandler}\n\n                            tableName='Reviews'\n                            addRow={this.props.addRow}\n                            deleteRow={this.props.deleteRow}\n                            updateRows={this.props.updateRows}\n                            getDataToUpdate={this.getDataToUpdate}\n                            cleanDataToUpdate={this.cleanDataToUpdate}\n                        /> \n                    </div>\n                 </main>\n            }\n\n            \n        </React.Fragment> \n    );\n  }\n}\n\nexport default Reviews;\n"]},"metadata":{},"sourceType":"module"}