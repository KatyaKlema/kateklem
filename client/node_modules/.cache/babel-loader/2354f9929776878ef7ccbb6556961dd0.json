{"ast":null,"code":"import { getParams, findLookUpValue, fieldAdapter } from \"../utils\";\n\nconst getTableStructure = functions => {\n  return [{\n    title: \"Task\",\n    field: \"task\",\n    editor: \"input\",\n    formatter: \"textarea\",\n    width: 150\n  }, {\n    title: \"Role and Function\",\n    field: \"roleAndFunc\",\n    editor: \"select\",\n    width: 150,\n    editorParams: {\n      values: Array.from(new Set(getParams(functions, \"Role_function\")))\n    }\n  }, {\n    title: \"Role\",\n    field: \"role\",\n    width: 150\n  }, {\n    title: \"Unit\",\n    field: \"unit\",\n    width: 150\n  }, {\n    title: \"Function Short\",\n    field: \"funcShort\"\n  }, {\n    title: \"Function Long\",\n    field: \"funcLong\",\n    width: 300\n  }, {\n    title: \"How to do: Answer to test question\",\n    field: \"howToDo\",\n    editor: \"input\",\n    formatter: \"textarea\",\n    width: 500\n  }, {\n    title: \"Sequence\",\n    field: \"sequence\",\n    editor: \"input\",\n    formatter: \"textarea\"\n  }, {\n    title: \"Time required\",\n    field: \"timeReq\",\n    editor: \"input\",\n    formatter: \"textarea\"\n  }, {\n    title: \"Frequency per week\",\n    field: \"freqPerWeek\",\n    editor: \"input\",\n    formatter: \"textarea\"\n  }, {\n    title: \"Total time per week\",\n    field: \"totalTimePerweek\"\n  }, {\n    title: \"Importance\",\n    field: \"importance\",\n    editor: \"input\",\n    formatter: \"textarea\"\n  }, {\n    title: \"Can be Automated\",\n    field: \"canBeautomatic\",\n    editor: \"input\",\n    formatter: \"textarea\"\n  }];\n};\n\nconst emptyRow = {\n  canBeautomatic: undefined,\n  checkList: undefined,\n  freqPerWeek: undefined,\n  funcLong: undefined,\n  funcShort: undefined,\n  howToDo: undefined,\n  id: undefined,\n  importance: undefined,\n  role: undefined,\n  roleAndFunc: undefined,\n  sequence: undefined,\n  task: undefined,\n  timeReq: undefined,\n  totalTimePerweek: undefined,\n  unit: undefined\n};\n\nconst adaptTable = (task, units, functions, roles) => {\n  const taskFields = task.fields;\n  return {\n    id: task.id,\n    task: taskFields[\"Task\"],\n    roleAndFunc: findLookUpValue(functions, taskFields[\"Role and Function\"], \"Role_function\"),\n    role: findLookUpValue(roles, taskFields[\"Role\"], \"Role in Unit\"),\n    unit: findLookUpValue(units, taskFields[\"Unit\"], \"Unit\"),\n    funcShort: taskFields[\"Function Short\"],\n    funcLong: taskFields[\"function_long\"],\n    howToDo: taskFields[\" How to do: Answer to test question\"],\n    sequence: taskFields[\"Sequence\"],\n    timeReq: taskFields[\"Time required (mins)\"],\n    freqPerWeek: taskFields[\"Frequency per week\"],\n    totalTimePerweek: taskFields[\"Time required (mins)\"] * taskFields[\"Frequency per week\"],\n    importance: taskFields[\"Importance\"],\n    canBeautomatic: taskFields[\"Can be automated?\"],\n    checkList: taskFields[\"CheckList\"]\n  };\n};\n\nconst adaptDataToRaw = (data, functions) => {\n  return data.map(item => {\n    return {\n      id: item.id,\n      fields: {\n        Task: item.task,\n        \" How to do: Answer to test question\": item.howToDo,\n        Sequence: item.sequence,\n        \"Time required (mins)\": parseFloat(item.timeReq),\n        \"Frequency per week\": parseFloat(item.freqPerWeek),\n        Importance: item.importance,\n        \"Can be automated?\": item.canBeautomatic,\n        Checklist: item.checkList,\n        \"Role and Function\": fieldAdapter(\"Role_function\", item.roleAndFunc, functions)\n      }\n    };\n  });\n};\n\nexport const filterRoleAndFuncDropdownByUnit = (unit, functions, units) => {\n  let userUnitId = null;\n  const roleAndFuncList = [];\n\n  if (units) {\n    userUnitId = fieldAdapter(\"Unit\", unit, units)[0];\n  }\n\n  if (functions) {\n    functions.forEach(row => {\n      if (row.fields[\"Unit from role\"] && row.fields[\"Unit from role\"].includes(userUnitId)) {\n        roleAndFuncList.push(row.fields[\"Role_function\"]);\n      }\n    });\n  }\n\n  return roleAndFuncList;\n};\n\nconst changeRoleAndFunctionHandler = (cell, tableData, functions, roleUnit, units) => {\n  const editedData = cell.getData();\n  const editedIndex = tableData.findIndex(value => value.id === editedData.id);\n  const targetFunction = functions.find(value => value.fields[\"Role_function\"] === editedData.roleAndFunc);\n\n  if (targetFunction) {\n    const roleId = targetFunction.fields[\"Role\"];\n    const unitId = targetFunction.fields[\"Unit from role\"];\n    const role = findLookUpValue(roleUnit, roleId, \"Role in Unit\");\n    const unit = findLookUpValue(units, unitId, \"Unit\");\n    const funcShort = targetFunction.fields[\"Function_short\"];\n    const funcLong = targetFunction.fields[\"Function_long\"];\n    tableData[editedIndex].role = role;\n    tableData[editedIndex].unit = unit;\n    tableData[editedIndex].funcShort = funcShort;\n    tableData[editedIndex].funcLong = funcLong;\n  }\n}; //---------------- changes -----------------\n\n\nconst changeTimeRequired = (cell, tableData, functions) => {\n  const editedData = cell.getData();\n  const editedIndex = tableData.findIndex(value => value.id === editedData.id);\n  tableData[editedIndex].totalTimePerweek = tableData[editedIndex].timeReq * tableData[editedIndex].freqPerWeek;\n}; //---------------------------------------------\n\n\nexport { getTableStructure, emptyRow, adaptTable, changeRoleAndFunctionHandler, changeTimeRequired, adaptDataToRaw };","map":{"version":3,"sources":["/Users/ekaterina/Desktop/latoken/03.08.2020/operations-platform/client/src/tables/tasks.js"],"names":["getParams","findLookUpValue","fieldAdapter","getTableStructure","functions","title","field","editor","formatter","width","editorParams","values","Array","from","Set","emptyRow","canBeautomatic","undefined","checkList","freqPerWeek","funcLong","funcShort","howToDo","id","importance","role","roleAndFunc","sequence","task","timeReq","totalTimePerweek","unit","adaptTable","units","roles","taskFields","fields","adaptDataToRaw","data","map","item","Task","Sequence","parseFloat","Importance","Checklist","filterRoleAndFuncDropdownByUnit","userUnitId","roleAndFuncList","forEach","row","includes","push","changeRoleAndFunctionHandler","cell","tableData","roleUnit","editedData","getData","editedIndex","findIndex","value","targetFunction","find","roleId","unitId","changeTimeRequired"],"mappings":"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","sourcesContent":["import { getParams, findLookUpValue, fieldAdapter } from \"../utils\";\n\nconst getTableStructure = (functions) => {\n\n\treturn [\n\t\t{ title: \"Task\", field: \"task\",\teditor: \"input\", formatter: \"textarea\",\twidth: 150,},\n\t\t{ title: \"Role and Function\", field: \"roleAndFunc\",\teditor: \"select\", width: 150, editorParams: {values: Array.from(new Set(getParams(functions, \"Role_function\"))),},},\n\t\t{ title: \"Role\", field: \"role\", width: 150 },\n\t\t{ title: \"Unit\", field: \"unit\", width: 150 },\n\t\t{ title: \"Function Short\", field: \"funcShort\" },\n\t\t{ title: \"Function Long\", field: \"funcLong\", width: 300 },\n\t\t{ title: \"How to do: Answer to test question\", field: \"howToDo\", editor: \"input\", formatter: \"textarea\", width: 500, },\n\t\t{\n\t\t\ttitle: \"Sequence\",\n\t\t\tfield: \"sequence\",\n\t\t\teditor: \"input\",\n\t\t\tformatter: \"textarea\",\n\t\t},\n\t\t{\n\t\t\ttitle: \"Time required\",\n\t\t\tfield: \"timeReq\",\n\t\t\teditor: \"input\",\n\t\t\tformatter: \"textarea\",\n\t\t},\n\t\t{\n\t\t\ttitle: \"Frequency per week\",\n\t\t\tfield: \"freqPerWeek\",\n\t\t\teditor: \"input\",\n\t\t\tformatter: \"textarea\",\n\t\t},\n\t\t{ title: \"Total time per week\", field: \"totalTimePerweek\" },\n\t\t{\n\t\t\ttitle: \"Importance\",\n\t\t\tfield: \"importance\",\n\t\t\teditor: \"input\",\n\t\t\tformatter: \"textarea\",\n\t\t},\n\t\t{\n\t\t\ttitle: \"Can be Automated\",\n\t\t\tfield: \"canBeautomatic\",\n\t\t\teditor: \"input\",\n\t\t\tformatter: \"textarea\",\n\t\t},\n\t];\n};\n\nconst emptyRow = {\n\tcanBeautomatic: undefined,\n\tcheckList: undefined,\n\tfreqPerWeek: undefined,\n\tfuncLong: undefined,\n\tfuncShort: undefined,\n\thowToDo: undefined,\n\tid: undefined,\n\timportance: undefined,\n\trole: undefined,\n\troleAndFunc: undefined,\n\tsequence: undefined,\n\ttask: undefined,\n\ttimeReq: undefined,\n\ttotalTimePerweek: undefined,\n\tunit: undefined,\n};\n\nconst adaptTable = (task, units, functions, roles) => {\n\tconst taskFields = task.fields;\n\treturn {\n\t\tid: task.id,\n\t\ttask: taskFields[\"Task\"],\n\t\troleAndFunc: findLookUpValue(functions,\ttaskFields[\"Role and Function\"], \"Role_function\"),\n\t\trole: findLookUpValue(roles, taskFields[\"Role\"], \"Role in Unit\"),\n\t\tunit: findLookUpValue(units, taskFields[\"Unit\"], \"Unit\"),\n\t\tfuncShort: taskFields[\"Function Short\"],\n\t\tfuncLong: taskFields[\"function_long\"],\n\t\thowToDo: taskFields[\" How to do: Answer to test question\"],\n\t\tsequence: taskFields[\"Sequence\"],\n\t\ttimeReq: taskFields[\"Time required (mins)\"],\n\t\tfreqPerWeek: taskFields[\"Frequency per week\"],\n\t\ttotalTimePerweek:\n\t\t\ttaskFields[\"Time required (mins)\"] *\n\t\t\ttaskFields[\"Frequency per week\"],\n\t\timportance: taskFields[\"Importance\"],\n\t\tcanBeautomatic: taskFields[\"Can be automated?\"],\n\t\tcheckList: taskFields[\"CheckList\"],\n\t};\n};\n\nconst adaptDataToRaw = (data, functions) => {\n\treturn data.map((item) => {\n\t\treturn {\n\t\t\tid: item.id,\n\t\t\tfields: {\n\t\t\t\tTask: item.task,\n\t\t\t\t\" How to do: Answer to test question\": item.howToDo,\n\t\t\t\tSequence: item.sequence,\n\t\t\t\t\"Time required (mins)\": parseFloat(item.timeReq),\n\t\t\t\t\"Frequency per week\": parseFloat(item.freqPerWeek),\n\t\t\t\tImportance: item.importance,\n\t\t\t\t\"Can be automated?\": item.canBeautomatic,\n\t\t\t\tChecklist: item.checkList,\n\t\t\t\t\"Role and Function\": fieldAdapter(\n\t\t\t\t\t\"Role_function\",\n\t\t\t\t\titem.roleAndFunc,\n\t\t\t\t\tfunctions\n\t\t\t\t),\n\t\t\t},\n\t\t};\n\t});\n};\n\nexport const filterRoleAndFuncDropdownByUnit = (unit, functions, units) => {\n\tlet userUnitId = null;\n\tconst roleAndFuncList = [];\n\tif (units) {\n\t\tuserUnitId = fieldAdapter(\"Unit\", unit, units)[0]\n\t}\n\tif (functions) {\n\t\tfunctions.forEach((row) => {\n\t\t\tif (row.fields[\"Unit from role\"] && row.fields[\"Unit from role\"].includes(userUnitId)) {\n\t\t\t\troleAndFuncList.push(row.fields[\"Role_function\"]);\n\t\t\t}\n\t\t});\n\t}\n\treturn roleAndFuncList;\n}\n\nconst changeRoleAndFunctionHandler = (\n\tcell,\n\ttableData,\n\tfunctions,\n\troleUnit,\n\tunits\n) => {\n\tconst editedData = cell.getData();\n\tconst editedIndex = tableData.findIndex(\n\t\t(value) => value.id === editedData.id\n\t);\n\n\tconst targetFunction = functions.find(\n\t\t(value) => value.fields[\"Role_function\"] === editedData.roleAndFunc\n\t);\n\n\tif (targetFunction) {\n\t\tconst roleId = targetFunction.fields[\"Role\"];\n\t\tconst unitId = targetFunction.fields[\"Unit from role\"];\n\n\t\tconst role = findLookUpValue(roleUnit, roleId, \"Role in Unit\");\n\t\tconst unit = findLookUpValue(units, unitId, \"Unit\");\n\t\tconst funcShort = targetFunction.fields[\"Function_short\"];\n\t\tconst funcLong = targetFunction.fields[\"Function_long\"];\n\n\t\ttableData[editedIndex].role = role;\n\t\ttableData[editedIndex].unit = unit;\n\t\ttableData[editedIndex].funcShort = funcShort;\n\t\ttableData[editedIndex].funcLong = funcLong;\n\t}\n};\n//---------------- changes -----------------\nconst changeTimeRequired = (cell, tableData, functions) => {\n\tconst editedData = cell.getData();\n\tconst editedIndex = tableData.findIndex(\n\t\t(value) => value.id === editedData.id\n\t);\n\n\ttableData[editedIndex].totalTimePerweek =\n\t\ttableData[editedIndex].timeReq * tableData[editedIndex].freqPerWeek;\n};\n//---------------------------------------------\nexport {\n\tgetTableStructure,\n\temptyRow,\n\tadaptTable,\n\tchangeRoleAndFunctionHandler,\n\tchangeTimeRequired,\n\tadaptDataToRaw,\n};\n"]},"metadata":{},"sourceType":"module"}