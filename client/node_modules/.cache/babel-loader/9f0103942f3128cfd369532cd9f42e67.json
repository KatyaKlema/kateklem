{"ast":null,"code":"import { getParams, findLookUpValue, fieldAdapter } from \"../utils\";\n\nconst adaptTable = (role_and_function, functions, units, roles, roleUnit, tasks) => {\n  const functionFields = role_and_function.fields;\n  return {\n    id: role_and_function.id,\n    roleFunc: functionFields[\"Role_function\"],\n    priority: functionFields[\"Priority\"],\n    role: findLookUpValue(roleUnit, functionFields[\"Role\"], \"Role in Unit\"),\n    unit: findLookUpValue(units, functionFields[\"Unit from role\"], \"Unit\"),\n    funcShort: functionFields[\"Function_short\"],\n    funcLong: functionFields[\"Function_long\"],\n    num: functionFields[\"Num\"],\n    longName: functionFields[\"Long_name\"],\n    funcRuss: functionFields[\"Function_russian\"],\n    longNameRuss: functionFields[\"Long_name_russian\"],\n    requirements: functionFields[\"Requirements\"],\n    tasks2: functionFields[\"Task2\"],\n    modified: functionFields[\"Modified\"],\n    tasksCopy: functionFields[\"Tasks copy\"],\n    stackerMembers: functionFields[\"Stacker Members\"],\n    tasks: functionFields[\"Tasks\"],\n    \"tasks 2\": findLookUpValue(tasks, functionFields[\"Tasks 2\"], \"Task\"),\n    stackerMembers2: functionFields[\"Stacker Members 2\"],\n    email: functionFields[\"Email\"]\n  };\n};\n\nconst adaptDataToRaw = (data, functions, units, roles, roleUnit, tasks) => {\n  return data.map(item => {\n    return {\n      id: item.id,\n      fields: {\n        Priority: parseInt(item.priority),\n        Function_short: item.funcShort,\n        Function_long: item.funcLong,\n        Function_russian: item.funcRuss,\n        Role: fieldAdapter(\"Role in Unit\", item.role, roleUnit),\n        Num: item.num,\n        Requirements: item.requirements,\n        Tasks2: item.tasks2,\n        \"Tasks copy\": item.tasksCopy,\n        \"Stacker Members\": item.stackerMembers,\n        Tasks: item.tasks,\n        \"Tasks 2\": fieldAdapter(\"Task\", item[\"tasks 2\"], tasks),\n        \"Stacker Members 2\": item.stackerMembers2,\n        Email: item.email\n      }\n    };\n  });\n};\n\nconst getTableStructure = (user, functions, units, roles, roleUnit, tasks) => {\n  return [{\n    title: \"Role and Function\",\n    field: \"roleFunc\",\n    width: 150\n  }, {\n    title: \"Priority\",\n    field: \"priority\",\n    editor: \"input\",\n    width: 150,\n    formatter: \"textarea\"\n  }, {\n    title: \"Function Short\",\n    field: \"funcShort\",\n    editor: \"input\",\n    formatter: \"textarea\",\n    width: 200\n  }, {\n    title: \"Function Long\",\n    field: \"funcLong\",\n    editor: \"input\",\n    width: 300,\n    formatter: \"textarea\"\n  }, {\n    title: \"Function Russian\",\n    field: \"funcRuss\",\n    editor: \"input\",\n    width: 300,\n    formatter: \"textarea\"\n  }, {\n    title: \"Role\",\n    field: \"role\",\n    width: 200,\n    editor: \"select\",\n    editorParams: {\n      values: Array.from(new Set(getParams(roles, \"Role\")))\n    }\n  }, {\n    title: \"Unit\",\n    field: \"unit\",\n    width: 200\n  }, {\n    title: \"Num\",\n    field: \"num\",\n    editor: \"input\",\n    formatter: \"textarea\",\n    width: 150\n  }, {\n    title: \"Long name\",\n    field: \"longName\",\n    width: 250,\n    formatter: \"textarea\"\n  }, {\n    title: \"Long name russian\",\n    field: \"priority\",\n    width: 250,\n    formatter: \"textarea\"\n  }, {\n    title: \"Requirements\",\n    field: \"requirements\",\n    width: 200,\n    formatter: \"textarea\",\n    editor: \"input\"\n  }, {\n    title: \"Tasks2\",\n    field: \"tasks2\",\n    width: 200,\n    editor: \"input\",\n    formatter: \"textarea\"\n  }, {\n    title: \"Modified\",\n    field: \"modified\",\n    width: 200,\n    formatter: \"textarea\"\n  }, {\n    title: \"Tasks copy\",\n    field: \"tasksCopy\",\n    editor: \"input\",\n    width: 200,\n    formatter: \"textarea\"\n  }, {\n    title: \"Stacker members\",\n    field: \"stackerMembers\",\n    editor: \"input\",\n    width: 200,\n    formatter: \"textarea\"\n  }, {\n    title: \"Tasks\",\n    field: \"tasks\",\n    editor: \"input\",\n    width: 200,\n    formatter: \"textarea\"\n  }, {\n    title: \"Tasks 2\",\n    field: \"tasks 2\",\n    width: 200,\n    editor: \"select\",\n    editorParams: {\n      values: Array.from(new Set(getParams(tasks, \"Task\")))\n    }\n  }, {\n    title: \"Stacker members 2\",\n    field: \"stackerMembers2\",\n    editor: \"input\",\n    width: 200,\n    formatter: \"textarea\"\n  }, {\n    title: \"Email\",\n    field: \"email\",\n    editor: \"input\",\n    width: 200,\n    formatter: \"textarea\"\n  }];\n};\n\nconst emptyRow = {\n  id: undefined,\n  roleFunc: undefined,\n  priority: undefined,\n  role: undefined,\n  unit: undefined,\n  funcShort: undefined,\n  funcLong: undefined,\n  num: undefined,\n  longName: undefined,\n  funcRuss: undefined,\n  longNameRuss: undefined,\n  requirements: undefined,\n  task2: undefined,\n  modified: undefined,\n  tasksCopy: undefined,\n  stackerMembers: undefined,\n  tasks: undefined,\n  tasks2: undefined,\n  stackMembers2: undefined,\n  email: undefined\n};\nexport const filterRoleDropdownByUnit = (unit, roleUnit, roles, units) => {\n  let userUnitId = null;\n  const rolesList = [];\n\n  if (units) {\n    userUnitId = fieldAdapter(\"Unit\", unit, units)[0];\n  }\n\n  if (roleUnit && roles) {\n    roleUnit.forEach(row => {\n      if (row.fields[\"Unit\"] && row.fields[\"Unit\"].includes(userUnitId)) {\n        rolesList.push(findLookUpValue(roles, row.fields[\"Role\"], \"Role\"));\n      }\n    });\n  }\n\n  return rolesList;\n};\n\nconst changeRoleHandler = (cell, tableData, functions, roleUnit, units, dataToUpdate) => {\n  const editedData = cell.getData();\n  const editedIndex = tableData.findIndex(value => value.id === editedData.id);\n  const targetFunction = roleUnit.find(value => value.fields[\"Role in Unit\"] === editedData.role);\n\n  if (targetFunction) {\n    const unitId = targetFunction.fields[\"Unit\"];\n    const unit = findLookUpValue(units, unitId, \"Unit\");\n    tableData[editedIndex].role = targetFunction.fields[\"Role in Unit\"];\n    tableData[editedIndex].unit = unit;\n    tableData[editedIndex].roleFunc = tableData[editedIndex].role + \" \" + tableData[editedIndex].funcShort;\n    tableData[editedIndex].longName = tableData[editedIndex].funcLong;\n    tableData[editedIndex].longNameRuss = tableData[editedIndex].num + \".\" + tableData[editedIndex].funcRuss + \"\\n\";\n    dataToUpdate.push(editedData);\n  }\n};\n\nexport { adaptTable, adaptDataToRaw, getTableStructure, emptyRow, changeRoleHandler };","map":{"version":3,"sources":["/Users/ekaterina/Desktop/latoken/03.08.2020/operations-platform/client/src/tables/functions.js"],"names":["getParams","findLookUpValue","fieldAdapter","adaptTable","role_and_function","functions","units","roles","roleUnit","tasks","functionFields","fields","id","roleFunc","priority","role","unit","funcShort","funcLong","num","longName","funcRuss","longNameRuss","requirements","tasks2","modified","tasksCopy","stackerMembers","stackerMembers2","email","adaptDataToRaw","data","map","item","Priority","parseInt","Function_short","Function_long","Function_russian","Role","Num","Requirements","Tasks2","Tasks","Email","getTableStructure","user","title","field","width","editor","formatter","editorParams","values","Array","from","Set","emptyRow","undefined","task2","stackMembers2","filterRoleDropdownByUnit","userUnitId","rolesList","forEach","row","includes","push","changeRoleHandler","cell","tableData","dataToUpdate","editedData","getData","editedIndex","findIndex","value","targetFunction","find","unitId"],"mappings":"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","sourcesContent":["import { getParams, findLookUpValue, fieldAdapter } from \"../utils\";\n\nconst adaptTable = (\n    role_and_function,\n    functions,\n    units,\n    roles,\n    roleUnit,\n    tasks\n) => {\n    const functionFields = role_and_function.fields;\n    return {\n        id: role_and_function.id,\n        roleFunc: functionFields[\"Role_function\"],\n        priority: functionFields[\"Priority\"],\n        role: findLookUpValue(roleUnit, functionFields[\"Role\"], \"Role in Unit\"),\n        unit: findLookUpValue(units, functionFields[\"Unit from role\"], \"Unit\"),\n        funcShort: functionFields[\"Function_short\"],\n        funcLong: functionFields[\"Function_long\"],\n        num: functionFields[\"Num\"],\n        longName: functionFields[\"Long_name\"],\n        funcRuss: functionFields[\"Function_russian\"],\n        longNameRuss: functionFields[\"Long_name_russian\"],\n        requirements: functionFields[\"Requirements\"],\n        tasks2: functionFields[\"Task2\"],\n        modified: functionFields[\"Modified\"],\n        tasksCopy: functionFields[\"Tasks copy\"],\n        stackerMembers: functionFields[\"Stacker Members\"],\n        tasks: functionFields[\"Tasks\"],\n        \"tasks 2\": findLookUpValue(tasks, functionFields[\"Tasks 2\"], \"Task\"),\n        stackerMembers2: functionFields[\"Stacker Members 2\"],\n        email: functionFields[\"Email\"],\n    };\n};\n\nconst adaptDataToRaw = (data, functions, units, roles, roleUnit, tasks) => {\n    return data.map((item) => {\n        return {\n            id: item.id,\n            fields: {\n                Priority: parseInt(item.priority),\n                Function_short: item.funcShort,\n                Function_long: item.funcLong,\n                Function_russian: item.funcRuss,\n                Role: fieldAdapter(\"Role in Unit\", item.role, roleUnit),\n                Num: item.num,\n                Requirements: item.requirements,\n                Tasks2: item.tasks2,\n                \"Tasks copy\": item.tasksCopy,\n                \"Stacker Members\": item.stackerMembers,\n                Tasks: item.tasks,\n                \"Tasks 2\": fieldAdapter(\"Task\", item[\"tasks 2\"], tasks),\n                \"Stacker Members 2\": item.stackerMembers2,\n                Email: item.email,\n            },\n        };\n    });\n};\n\nconst getTableStructure = (user, functions, units, roles, roleUnit, tasks) => {\n    return [\n        {\n            title: \"Role and Function\",\n            field: \"roleFunc\",\n            width: 150,\n        },\n        {\n            title: \"Priority\",\n            field: \"priority\",\n            editor: \"input\",\n            width: 150,\n            formatter: \"textarea\",\n        },\n        {\n            title: \"Function Short\",\n            field: \"funcShort\",\n            editor: \"input\",\n            formatter: \"textarea\",\n            width: 200,\n        },\n        {\n            title: \"Function Long\",\n            field: \"funcLong\",\n            editor: \"input\",\n            width: 300,\n            formatter: \"textarea\",\n        },\n        {\n            title: \"Function Russian\",\n            field: \"funcRuss\",\n            editor: \"input\",\n            width: 300,\n            formatter: \"textarea\",\n        },\n        {\n            title: \"Role\",\n            field: \"role\",\n            width: 200,\n            editor: \"select\",\n            editorParams: {\n                values: Array.from(new Set(getParams(roles, \"Role\"))),\n            },\n        },\n        { title: \"Unit\", field: \"unit\", width: 200 },\n        {\n            title: \"Num\",\n            field: \"num\",\n            editor: \"input\",\n            formatter: \"textarea\",\n            width: 150,\n        },\n        {\n            title: \"Long name\",\n            field: \"longName\",\n            width: 250,\n            formatter: \"textarea\",\n        },\n        {\n            title: \"Long name russian\",\n            field: \"priority\",\n            width: 250,\n            formatter: \"textarea\",\n        },\n        {\n            title: \"Requirements\",\n            field: \"requirements\",\n            width: 200,\n            formatter: \"textarea\",\n            editor: \"input\",\n        },\n        {\n            title: \"Tasks2\",\n            field: \"tasks2\",\n            width: 200,\n            editor: \"input\",\n            formatter: \"textarea\",\n        },\n        {\n            title: \"Modified\",\n            field: \"modified\",\n            width: 200,\n            formatter: \"textarea\",\n        },\n        {\n            title: \"Tasks copy\",\n            field: \"tasksCopy\",\n            editor: \"input\",\n            width: 200,\n            formatter: \"textarea\",\n        },\n        {\n            title: \"Stacker members\",\n            field: \"stackerMembers\",\n            editor: \"input\",\n            width: 200,\n            formatter: \"textarea\",\n        },\n        {\n            title: \"Tasks\",\n            field: \"tasks\",\n            editor: \"input\",\n            width: 200,\n            formatter: \"textarea\",\n        },\n        {\n            title: \"Tasks 2\",\n            field: \"tasks 2\",\n            width: 200,\n            editor: \"select\",\n            editorParams: {\n                values: Array.from(new Set(getParams(tasks, \"Task\"))),\n            },\n        },\n        {\n            title: \"Stacker members 2\",\n            field: \"stackerMembers2\",\n            editor: \"input\",\n            width: 200,\n            formatter: \"textarea\",\n        },\n        {\n            title: \"Email\",\n            field: \"email\",\n            editor: \"input\",\n            width: 200,\n            formatter: \"textarea\",\n        },\n    ];\n};\n\nconst emptyRow = {\n    id: undefined,\n    roleFunc: undefined,\n    priority: undefined,\n    role: undefined,\n    unit: undefined,\n    funcShort: undefined,\n    funcLong: undefined,\n    num: undefined,\n    longName: undefined,\n    funcRuss: undefined,\n    longNameRuss: undefined,\n    requirements: undefined,\n    task2: undefined,\n    modified: undefined,\n    tasksCopy: undefined,\n    stackerMembers: undefined,\n    tasks: undefined,\n    tasks2: undefined,\n    stackMembers2: undefined,\n    email: undefined,\n};\n\nexport const filterRoleDropdownByUnit = (unit, roleUnit, roles, units) => {\n    let userUnitId = null;\n    const rolesList = [];\n    if (units) {\n        userUnitId = fieldAdapter(\"Unit\", unit, units)[0];\n    }\n    if (roleUnit && roles) {\n        roleUnit.forEach((row) => {\n            if (row.fields[\"Unit\"] && row.fields[\"Unit\"].includes(userUnitId)) {\n                rolesList.push(\n                    findLookUpValue(roles, row.fields[\"Role\"], \"Role\")\n                );\n            }\n        });\n    }\n    return rolesList;\n};\n\nconst changeRoleHandler = (\n    cell,\n    tableData,\n    functions,\n    roleUnit,\n    units,\n    dataToUpdate\n) => {\n    const editedData = cell.getData();\n    const editedIndex = tableData.findIndex(\n        (value) => value.id === editedData.id\n    );\n\n    const targetFunction = roleUnit.find(\n        (value) => value.fields[\"Role in Unit\"] === editedData.role\n    );\n\n    if (targetFunction) {\n        const unitId = targetFunction.fields[\"Unit\"];\n        const unit = findLookUpValue(units, unitId, \"Unit\");\n\n        tableData[editedIndex].role = targetFunction.fields[\"Role in Unit\"];\n        tableData[editedIndex].unit = unit;\n        tableData[editedIndex].roleFunc =\n            tableData[editedIndex].role +\n            \" \" +\n            tableData[editedIndex].funcShort;\n        tableData[editedIndex].longName = tableData[editedIndex].funcLong;\n        tableData[editedIndex].longNameRuss =\n            tableData[editedIndex].num +\n            \".\" +\n            tableData[editedIndex].funcRuss +\n            \"\\n\";\n        dataToUpdate.push(editedData);\n    }\n};\n\nexport {\n    adaptTable,\n    adaptDataToRaw,\n    getTableStructure,\n    emptyRow,\n    changeRoleHandler,\n};\n"]},"metadata":{},"sourceType":"module"}