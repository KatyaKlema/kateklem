{"ast":null,"code":"import { findLookUpValue } from \"../utils\";\n\nconst adaptTable = (review, units, functions, roles) => {\n  const itemFields = review.fields;\n  return {\n    id: review.id,\n    name: itemFields[\"Name\"],\n    roleAndFunc: findLookUpValue(functions, itemFields[\"Role and Function\"], \"Role_function\"),\n    role: itemFields[\"Role\"],\n    unit: itemFields[\"Unit\"],\n    performance: itemFields[\"Overall Performance\"],\n    mean: itemFields[\"Mean\"],\n    meanPercentage: itemFields[\"Mean %\"],\n    rating: Math.round(parseInt(itemFields[\"Mean %\"]) / 10)\n  };\n};\n\nconst adaptDataToRaw = data => {\n  return data.map(item => {\n    return {\n      id: item.id,\n      fields: {\n        Name: item.name,\n        Unit: item.unit,\n        \"Overall Performance\": parseFloat(item.performance),\n        Mean: parseFloat(item.mean),\n        Role: item.role,\n        \"Mean %\": item.meanPercentage\n      }\n    };\n  });\n};\n\nconst getTableStructure = () => {\n  return [{\n    rowHandle: true,\n    formatter: \"handle\",\n    headerSort: false,\n    frozen: true,\n    width: 30,\n    minWidth: 30\n  }, {\n    title: \"Name\",\n    field: \"name\",\n    formatter: \"textarea\",\n    width: 250\n  }, {\n    title: \"Unit\",\n    field: \"unit\",\n    formatter: \"textarea\",\n    width: 250\n  }, {\n    title: \"Role\",\n    field: \"role\",\n    width: 250\n  }, {\n    title: \"Overall Permformance\",\n    field: \"performance\",\n    formatter: \"textarea\",\n    width: 200,\n    sorter: \"number\"\n  }, {\n    title: \"Mean (numeric)\",\n    field: \"mean\",\n    formatter: \"textarea\",\n    width: 180\n  }, {\n    title: \"Rating\",\n    field: \"rating\",\n    formatter: \"star\",\n    formatterParams: {\n      stars: 10\n    },\n    hozAlign: \"center\",\n    width: 290\n  }, {\n    title: \"Mean (percentage)\",\n    field: \"meanPercentage\",\n    formatter: \"textarea\",\n    width: 160\n  }];\n};\n\nconst emptyRow = {\n  id: undefined,\n  name: undefined,\n  unit: undefined,\n  role: undefined,\n  performance: undefined,\n  mean: undefined,\n  meanPercentage: undefined,\n  rating: undefined\n};\nexport { adaptTable, adaptDataToRaw, getTableStructure, emptyRow };","map":{"version":3,"sources":["/Users/ekaterina/Desktop/latoken/03.08.2020/operations-platform/client/src/tables/reviews.js"],"names":["findLookUpValue","adaptTable","review","units","functions","roles","itemFields","fields","id","name","roleAndFunc","role","unit","performance","mean","meanPercentage","rating","Math","round","parseInt","adaptDataToRaw","data","map","item","Name","Unit","parseFloat","Mean","Role","getTableStructure","rowHandle","formatter","headerSort","frozen","width","minWidth","title","field","sorter","formatterParams","stars","hozAlign","emptyRow","undefined"],"mappings":"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","sourcesContent":["import {findLookUpValue} from \"../utils\";\n\n const adaptTable = (review, units, functions, roles) => {\n    const itemFields = review.fields;\n    return {\n        id: review.id,\n        name: itemFields[\"Name\"],\n        roleAndFunc: findLookUpValue(\n            functions,\n            itemFields[\"Role and Function\"],\n            \"Role_function\"\n        ),\n        role: itemFields[\"Role\"],\n        unit: itemFields[\"Unit\"],\n        performance: itemFields[\"Overall Performance\"],\n        mean: itemFields[\"Mean\"],\n        meanPercentage: itemFields[\"Mean %\"],\n        rating: Math.round(parseInt(itemFields[\"Mean %\"]) / 10),\n    };\n};\n\n\nconst adaptDataToRaw = (data) => {\n    return data.map((item) => {\n        return {\n            id: item.id,\n            fields: {\n                Name: item.name,\n                Unit: item.unit,\n                \"Overall Performance\": parseFloat(item.performance),\n                Mean: parseFloat(item.mean),\n                Role: item.role,\n                \"Mean %\": item.meanPercentage,\n            },\n        };\n    });\n};\n\nconst getTableStructure = () => {\n    return [\n        {\n            rowHandle: true,\n            formatter: \"handle\",\n            headerSort: false,\n            frozen: true,\n            width: 30,\n            minWidth: 30,\n        },\n        {\n            title: \"Name\",\n            field: \"name\",\n            formatter: \"textarea\",\n            width: 250,\n        },\n        {\n            title: \"Unit\",\n            field: \"unit\",\n            formatter: \"textarea\",\n            width: 250,\n        },\n        {\n            title: \"Role\",\n            field: \"role\",\n            width: 250,\n        },\n        {\n            title: \"Overall Permformance\",\n            field: \"performance\",\n            formatter: \"textarea\",\n            width: 200,\n            sorter: \"number\",\n        },\n        {\n            title: \"Mean (numeric)\",\n            field: \"mean\",\n            formatter: \"textarea\",\n            width: 180,\n        },\n        {\n            title: \"Rating\",\n            field: \"rating\",\n            formatter: \"star\",\n            formatterParams: { stars: 10 },\n            hozAlign: \"center\",\n            width: 290,\n        },\n        {\n            title: \"Mean (percentage)\",\n            field: \"meanPercentage\",\n            formatter: \"textarea\",\n            width: 160,\n        },\n    ];\n};\n\nconst emptyRow = {\n    id: undefined,\n    name: undefined,\n    unit: undefined,\n    role: undefined,\n    performance: undefined,\n    mean: undefined,\n    meanPercentage: undefined,\n    rating: undefined,\n};\n\nexport {adaptTable, adaptDataToRaw, getTableStructure, emptyRow}"]},"metadata":{},"sourceType":"module"}